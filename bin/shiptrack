#!/usr/bin/env ruby

# This file is part of ShipTrack.
#
# Copyright 2014 Jamie Hale <jamie@smallarmyofnerds.com>
#
# ShipTrack is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ShipTrack is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ShipTrack. If not, see <http://www.gnu.org/licenses/>.

require 'shiptrack'

module ShipTrack
  
  $VERSION = '0.0.3'
  
  $program = 'shiptrack'
  $resources_path = File.expand_path( File.dirname( __FILE__ ) + '/../res' )
  
  configuration_file = ConfigurationFile.load( "#{ENV['HOME']}/.shiptrackrc" )
  configuration = Configuration.new( configuration_file )
  configuration[ :active_shipments_filename ] = 'active_shipments'
  configuration[ :active_shipments_filepath ] = File.join( configuration[ :path ], configuration[ :active_shipments_filename ] )
  configuration[ :archive_path ] = File.join( configuration[ :path ], 'archive' )
  configuration[ :active_archive_filepath ] = File.join( configuration[ :archive_path ], DateTime.now.strftime( 'archive_%Y-%m' ) )

  FileUtils.mkdir configuration[ :path ] unless File.directory?( configuration[ :path ] )
  ShipmentList.new().save( configuration[ :active_shipments_filepath ] ) unless File.exists?( configuration[ :active_shipments_filepath ] )
  
  command_processor = CommandProcessor.initialize do
    handle HelpCommand.new
    handle VersionCommand.new
    handle ListCommand.new( ShipmentDumper.new )
    handle PurchaseCommand.new
    handle DetailsCommand.new( ShipmentDumper.new )
    handle UpdateCommand.new
    handle OrderCommand.new
    handle PaidCommand.new
    handle TrackCommand.new
    handle ShipCommand.new
    handle ReceiveCommand.new
    handle ArchiveCommand.new
  end

  begin
    if ARGV.size == 0
      command_processor.each_command do |command|
        puts "%-12s #{command.description}" % command.name
      end
    else
      command_processor.run( ARGV[ 0 ], configuration, ARGV[ 1..-1 ] )
    end
  rescue Error => e
    abort "ERROR: #{e.message}"
  end

end
